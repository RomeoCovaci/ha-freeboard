!function(){freeboard.loadDatasourcePlugin({type_name:"hass",display_name:"Home Assistant",description:"Connects to Home Assistant instance via a WebSocket",external_scripts:["js/haws.umd.js"],settings:[{name:"hass_ws_url",display_name:"Home Assistant WS URL",type:"text",default_value:"ws://127.0.0.1:8123/api/websocket",description:"The URL to the Home Assistant instance WebSocket API.",required:!0}],newInstance:function(settings,newInstanceCallback,updateCallback){newInstanceCallback(new HAWSDatasourcePlugin(settings,updateCallback))}});var HAWSDatasourcePlugin=function(settings,updateCallback){function updateEntityState(entity_id,state,attributes){self.haData[entity_id]=state,self.haData[entity_id+"_attrs"]=attributes}function doConnection(){self.haData={},console.log("HAWS datasource - connecting to "+currentSettings.hass_ws_url),HAWS.createConnection(currentSettings.hass_ws_url).then(function(conn){self.conn=conn,getAllData(),conn.subscribeEvents(function(e){updateEntityState(e.data.entity_id,e.data.new_state.state,e.data.new_state.attributes),updateCallback(self.haData)},"state_changed").then(function(cancelSub){self.cancelSubsription=cancelSub})},function(err){console.log("HAWS connection failed "+err)})}function getAllData(){if(self.conn){var newData={};self.conn.getStates().then(function(entities){Object.keys(entities).sort().map(function(key){updateEntityState(entities[key].entity_id,entities[key].state,entities[key].attributes)})},function(err){console.log("getStates() failed - "+err)}),self.haData=newData,updateCallback(self.haData)}}var self=this,currentSettings=settings;self.onSettingsChanged=function(newSettings){newSettings.hass_ws_url!=currentSettings.hass_ws_url&&(self.conn&&self.conn.close(),currentSettings=newSettings,doConnection())},self.updateNow=function(){getAllData()},self.onDispose=function(){self.conn&&self.conn.close()},doConnection()}}();